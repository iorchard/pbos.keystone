---
- name: Setup | copy keystone init file
  ansible.builtin.copy:
    dest: "{{ item.dest }}"
    src: "{{ ansible_os_family | lower }}{{ item.dest }}"
    owner: "root"
    group: "root"
    mode: "0755"
  loop: "{{ os_service_init }}"
  become: true
  when: ansible_distribution == "Debian"

- name: Setup | template keystone configuration
  ansible.builtin.template:
    dest: "{{ item.dest }}"
    src: "{{ ansible_os_family | lower }}{{ item.dest + '.j2' }}"
    owner: "root"
    group: "{{ os_service_name }}"
    mode: "0640"
    backup: true
  loop: "{{ os_service_conf }}"
  become: true
  changed_when: true
  notify:
    - systemctl restart service

- name: Setup | create db tables
  ansible.builtin.shell: su -s /bin/bash keystone -c "keystone-manage db_sync"
  become: true
  delegate_to: "{{ groups['keystone'][0] }}"
  run_once: true

- name: Setup | fernet setup on the first keystone node
  ansible.builtin.command: >-
    keystone-manage fernet_setup \
      --keystone-user keystone --keystone-group keystone
  become: true
  delegate_to: "{{ groups['keystone'][0] }}"
  run_once: true

- name: Setup | credential setup on the first keystone node
  ansible.builtin.command: >-
    keystone-manage credential_setup \
      --keystone-user keystone --keystone-group keystone
  become: true
  delegate_to: "{{ groups['keystone'][0] }}"
  run_once: true

- name: Setup | synchronize keystone keys to /tmp on other nodes
  ansible.posix.synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    checksum: true
    rsync_path: "rsync"
  become: true
  delegate_to: "{{ groups['keystone'][0] }}"
  when: inventory_hostname != groups['keystone'][0]
  loop:
    - {src: "/etc/keystone/credential-keys/", dest: "/tmp/crendential-keys/"}
    - {src: "/etc/keystone/fernet-keys/", dest: "/tmp/fernet-keys/"}

- name: Setup | copy keystone keys from /tmp on other nodes
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ os_service_name }}"
    remote_src: true
  become: true
  delegate_to: "{{ inventory_hostname }}"
  when: inventory_hostname != groups['keystone'][0]
  loop:
    - {dest: "/etc/keystone/", src: "/tmp/crendential-keys"}
    - {dest: "/etc/keystone/", src: "/tmp/fernet-keys"}

- name: Setup | clean up temporary key directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  become: true
  loop:
    - "/tmp/crendential-keys/"
    - "/tmp/fernet-keys/"

- name: Setup | bootstrap keystone
  ansible.builtin.shell: >
      keystone-manage bootstrap \
        --bootstrap-password {{ openstack_admin_password }} \
        --bootstrap-admin-url http://{{ keepalived_vip }}:{{ keystone_port }}/v3/ \
        --bootstrap-internal-url http://{{ keepalived_vip }}:{{ keystone_port }}/v3/ \
        --bootstrap-public-url http://{{ keepalived_vip_svc | ternary(keepalived_vip_svc, keepalived_vip) }}:{{ keystone_port }}/v3/ \
        --bootstrap-region-id RegionOne
  become: true
  delegate_to: "{{ groups['keystone'][0] }}"
  run_once: true
  no_log: true

- name: Setup | flush handlers
  ansible.builtin.meta: flush_handlers

- name: Setup | create adminrc
  ansible.builtin.template:
    dest: "{{ ansible_env.HOME }}/.adminrc"
    src: "adminrc.j2"
    mode: "0600"

- name: Setup | add adminrc to .bashrc
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    regex: "^source.*adminrc"
    line: source ~/.adminrc
    state: present

- name: Setup | create directory for clouds.yaml
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.config/openstack"
    state: directory

- name: Setup | create clouds.yaml
  ansible.builtin.template:
    dest: "{{ ansible_env.HOME }}/.config/openstack/clouds.yaml"
    src: "clouds.yaml.j2"
    mode: "0600"

- name: Setup | wait for port open
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: "{{ keystone_port }}"
    sleep: 2
    timeout: 10
    state: started

- name: Setup | check service is available
  ansible.builtin.uri:
    url: "{{ os_service_url }}"
    method: GET
  register: _result
  delegate_to: "{{ groups['keystone'][0] }}"
  run_once: true
  until: _result.status == 200
  retries: 5
  delay: 5

- name: Setup | create Service Project
  openstack.cloud.project:
    cloud: pbos
    name: service
    interface: admin
    domain_id: default
    description: "Service Project"
    state: present
  delegate_to: "{{ groups['keystone'][0] }}"
  run_once: true
...
